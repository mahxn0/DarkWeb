#include "network.h"
#include "detection_layer.h"
#include "region_layer.h"
#include "cost_layer.h"
#include "utils.h"
#include "parser.h"
#include "box.h"
#include "image.h"
#include "demo.h"
#include <sys/time.h>
#include "xml_op.h"

#define DEMO 1
#define MAXLINE 300
#ifdef OPENCV

static char **demo_names;
static image **demo_alphabet;
static int demo_classes;

static float **probs;
static box *boxes;
static network *net;
static image buff [3];
static image buff_letter[3];
static int buff_index = 0;
static CvCapture * cap1=NULL;
static CvCapture * cap2=NULL;
static CvCapture * cap3=NULL;
static CvCapture * cap4=NULL;
static IplImage  * ipl;
static float fps = 0;
static float demo_thresh = 0;
static float demo_hier = .5;
static int running = 0;

static int demo_frame = 2;
static int demo_detections = 0;
static float **predictions;
static int demo_index = 0;
static int demo_done = 0;
static float *avg;
static int ipcam_flags=0;
static int count=0;
double demo_time;
/*                                                                                  
static char videodetsig1[8]={0};//channel 1 det sig
static char videodetsig2[8]={0};//channel 2 det sig
static char videodetsig3[8]={0};//channel 3 det sig
static char videodetsig4[8]={0};//channel 4 det sig
*/
static char *rtspname=NULL;
typedef struct       //socket通信传输的结构体
{
	char rtsp_url[256];
	int num;
}rtsp_info;

rtsp_info online_rtsp_info;

/*void loadvideodetsig()//judge rtsp jc_enable,on is detect start,off is detect stop
{
    get_from_xml("rtsp.jc_enable1",videodetsig1);
    get_from_xml("rtsp.jc_enable2",videodetsig2);
    get_from_xml("rtsp.jc_enable3",videodetsig3);
    get_from_xml("rtsp.jc_enable4",videodetsig4);
    printf("========camera stats:=======\n");
    printf("ipcamera1 is %c\n,ipcamera2 is %c\n,ipcamera3 is %c\n,ipcamera4 is %c\n",
	videodetsig1,videodetsig2,videodetsig3,videodetsig4);	
    
}
*/
double get_wall_time()
{
    struct timeval time;
    if (gettimeofday(&time,NULL)){
        return 0;
    }
    return (double)time.tv_sec + (double)time.tv_usec * .000001;
}

void *listen_thread()//listen 6668 port,get gstreamer papiline and open camera 
{
    //定义socket 监听端口等
    int    listenfd, connfd;
    struct sockaddr_in     servaddr;
    char    serverbuff[300];
    int     n;

    
	//socket listen message from web
	  if( (listenfd = socket(AF_INET, SOCK_STREAM, 0)) == -1 )
	{
 	  printf("create socket error: %s(errno: %d)\n",strerror(errno),errno);
   	  exit(0);
        }
  	 memset(&servaddr, 0, sizeof(servaddr));
    	 servaddr.sin_family = AF_INET;
         //servaddr.sin_addr.s_addr = htonl(INADDR_ANY);
     	if( inet_pton(AF_INET, "127.0.0.1", &servaddr.sin_addr) <= 0)
	 {
     		exit(0);
    	 }	
    	servaddr.sin_port = htons(6668);

   	 if( bind(listenfd, (struct sockaddr*)&servaddr, sizeof(servaddr)) == -1)
	{
    		printf("bind socket error: %s(errno: %d)\n",strerror(errno),errno);
    		exit(0);
    	}

   	 if( listen(listenfd, 10) == -1)
	{
    		printf("listen socket error: %s(errno: %d)\n",strerror(errno),errno);
    		exit(0);
    	}
	
    	printf("======waiting for client's request======\n");
	
	while(1)
	{
	    	if( (connfd = accept(listenfd, (struct sockaddr*)NULL, NULL)) == -1)//阻塞线程，监听端口信息
		{
	        	printf("accept socket error: %s(errno: %d)",strerror(errno),errno);
	        	continue;
    		}
		memset(serverbuff,0,sizeof(serverbuff));
	    	n = recv(connfd, serverbuff, MAXLINE, 0);
	   	memcpy(&online_rtsp_info, serverbuff , sizeof(rtsp_info));
	   	printf("rtsp_url=%s  num=%d\n", online_rtsp_info.rtsp_url , online_rtsp_info.num);
	        rtspname=NULL;
       		rtspname=online_rtsp_info.rtsp_url;
//		cvNamedWindow("Demo", CV_WINDOW_NORMAL); 
 //        	cvSetWindowProperty("Demo", CV_WND_PROP_FULLSCREEN, CV_WINDOW_FULLSCREEN);
//		cvMoveWindow("Demo",100,100);
//		cvResizeWindow("Demo",1280,720);
                switch(online_rtsp_info.num)
		{
		case 1:
		    
             	    if(!cap1) 
                    {
                    	printf("begin detect ipcam1 video ! please wait......\n");
                    	cap1=cvCaptureFromFile(rtspname);
                    }
		    else
                    {
                     	printf("camera1 is already opening!!!");
		     	//cvReleaseCapture(&cap1);
                    }                 	
			buff[0] = get_image_from_stream(cap1);
			break;
		case 2:
		    if(!cap2) 
                    {
                        printf("begin detect ipcam2 video ! please wait......\n");
                        cap2=cvCaptureFromFile(rtspname);
                    }
		    else
                    {
                        printf("camera2 is already opening!!!");
			//cvReleaseCapture(&cap2);
                    }
                	buff[0] = get_image_from_stream(cap2);
			break;
		case 3:
		    

		    if(!cap3) 
                    {
                        printf("begin detect ipcam3 video ! please wait......\n");
                        cap3=cvCaptureFromFile(rtspname);
                    }
		    else
                    {
                        printf("camera3 is already opening!!!");
                    }
                 	buff[0] = get_image_from_stream(cap3);
			break;
		case 4:
		    

		    if(!cap4) 
                    {
                        printf("begin detect ipcam4 video ! please wait......\n");
                        cap4=cvCaptureFromFile(rtspname);
                    }
		    else
                    {
                        printf("camera4 is already opening!!!");
                    }
                 	buff[0] = get_image_from_stream(cap4);
			break;
		default:
			printf("socket receive error ipcam num,please check...");
		} 
      		 buff[1] = copy_image(buff[0]);
        	 buff[2] = copy_image(buff[0]);  
		 buff_letter[0] = letterbox_image(buff[0], net->w, net->h);
		 buff_letter[1] = letterbox_image(buff[0], net->w, net->h);
		 buff_letter[2] = letterbox_image(buff[0], net->w, net->h);
		 ipl = cvCreateImage(cvSize(buff[0].w,buff[0].h), IPL_DEPTH_8U, buff[0].c);
		  if(cap1||cap2||cap3||cap4)
		 {
			printf("ipcamera %d now is opening\n",online_rtsp_info.num);
			ipcam_flags=online_rtsp_info.num;
		 }
		 else 
		 {
			printf("Error Open Camera");
		 } 
      		 demo_time = what_time_is_it_now();
		  //take turn to check video_detect_signal and ipcamera channel
		  //ipcam1 detect
		 printf("Now,Check Camera%d stats...\n",ipcam_flags);
	 	 close(connfd);
   	}   
	//end


}

void *detect_in_thread(void *ptr)
{
    running = 1;
    float nms = .4;

    layer l = net->layers[net->n-1];
    float *X = buff_letter[(buff_index+2)%3].data;
    float *prediction = network_predict(net, X);

    memcpy(predictions[demo_index], prediction, l.outputs*sizeof(float));
    mean_arrays(predictions, demo_frame, l.outputs, avg);
    l.output = avg;
    if(l.type == DETECTION){
        get_detection_boxes(l, 1, 1, demo_thresh, probs, boxes, 0);
    } else if (l.type == REGION){
        get_region_boxes(l, buff[0].w, buff[0].h, net->w, net->h, demo_thresh, probs, boxes, 0, 0, 0, demo_hier, 1);
    } else {
        error("Last layer must produce detections\n");
    }
    if (nms > 0) do_nms_obj(boxes, probs, l.w*l.h*l.n, l.classes, nms);

    printf("\033[2J");
    printf("\033[1;1H");
    printf("\nFPS:%.1f\n",fps);
    printf("Objects:\n\n");
    image display = buff[(buff_index+2) % 3];
    draw_detections(display, demo_detections, demo_thresh, boxes, probs, 0, demo_names, demo_alphabet, demo_classes);
    demo_index = (demo_index + 1)%demo_frame;
    running = 0;
    return 0;
}

void *fetch_in_thread(void *ptr)
{
    int status=0;
    switch(ipcam_flags)
    {
    case 1:
	status = fill_image_from_stream(cap1, buff[buff_index]);		
	break;
    case 2:
	break;
	status = fill_image_from_stream(cap2, buff[buff_index]);
    case 3:
	status = fill_image_from_stream(cap3, buff[buff_index]);
	break;
    case 4:
	status = fill_image_from_stream(cap4, buff[buff_index]);
	break;
    default:
	printf("fetch in thread status error");
	
    }
//  status = fill_image_from_stream(cap1, buff[buff_index]);
    letterbox_image_into(buff[buff_index], net->w, net->h, buff_letter[buff_index]);
    if(status == 0) demo_done = 1;
    return 0;
}

void *display_in_thread(void *ptr)
{
    show_image_cv(buff[(buff_index + 1)%3], "Demo", ipl);
    int c = cvWaitKey(1);
    if (c != -1) c = c%256;
    if (c == 27) {
        demo_done = 1;
        return 0;
    } else if (c == 82) {
        demo_thresh += .02;
    } else if (c == 84) {
        demo_thresh -= .02;
        if(demo_thresh <= .02) demo_thresh = .02;
    } else if (c == 83) {
        demo_hier += .02;
    } else if (c == 81) {
        demo_hier -= .02;
        if(demo_hier <= .0) demo_hier = .0;
    }
   return 0;
}

void *display_loop(void *ptr)
{
    while(1){
        display_in_thread(0);
    }
}

void *detect_loop(void *ptr)
{
    while(1){
        detect_in_thread(0);
    }
}
void demo(char *cfgfile, char *weightfile, float thresh, int cam_index, const char *filename, char **names, int classes, int delay, char *prefix, int avg_frames, float hier, int w, int h, int frames, int fullscreen)
{
    demo_frame = avg_frames;
    predictions = calloc(demo_frame, sizeof(float*));
    image **alphabet = load_alphabet();
    demo_names = names;
    demo_alphabet = alphabet;
    demo_classes = classes;
    demo_thresh = thresh;
    demo_hier = hier;
    printf("Demo\n");
    net = load_network(cfgfile, weightfile, 0);
    set_batch_network(net,1);
    pthread_t detect_thread;
    pthread_t fetch_thread;
    pthread_t socket_thread;
    srand(2222222);

	

    layer l = net->layers[net->n-1];
    demo_detections = l.n*l.w*l.h;
    int j;

    avg = (float *) calloc(l.outputs, sizeof(float));
    for(j = 0; j < demo_frame; ++j) predictions[j] = (float *) calloc(l.outputs, sizeof(float));

    boxes = (box *)calloc(l.w*l.h*l.n, sizeof(box));
    probs = (float **)calloc(l.w*l.h*l.n, sizeof(float *));
    for(j = 0; j < l.w*l.h*l.n; ++j) probs[j] = (float *)calloc(l.classes+1, sizeof(float));

    pthread_create(&socket_thread,NULL,listen_thread,NULL);
    while(1)
    {
	double before=0;
	if(ipcam_flags==1)//b  
        { 
	sleep(2);
	before=get_wall_time();
	while(!demo_done)
	{	    
            buff_index = (buff_index + 1) %3;
	        if(pthread_create(&fetch_thread, 0, fetch_in_thread, 0)) error("Thread creation failed");
            if(pthread_create(&detect_thread, 0, detect_in_thread, 0)) error("Thread creation failed");
      	    display_in_thread(0);
            pthread_join(fetch_thread, 0);
       	    pthread_join(detect_thread, 0);
            ++count;
	    if(ipcam_flags==2 || ipcam_flags==3 || ipcam_flags==4)
	     {
      	  // cvReleaseCapture(&cap);
		   break;
	     }
	      	double after=get_wall_time();
		fps=1./(after-before);
		before=after;
	   }
        }
	 if(ipcam_flags==2)
	{ 
	 sleep(2);
	 while(!demo_done)
        {
            buff_index = (buff_index + 1) %3;
            if(pthread_create(&fetch_thread, 0, fetch_in_thread, 0)) error("Thread creation failed");
            if(pthread_create(&detect_thread, 0, detect_in_thread, 0)) error("Thread creation failed");
            display_in_thread(0);
            pthread_join(fetch_thread, 0);
            pthread_join(detect_thread, 0);
            ++count;
	    if(ipcam_flags==1 || ipcam_flags==3 || ipcam_flags==4)
	    {
		//cvReleaseCapture(&cap);
		break;
	    }
	 }
        }
        if(ipcam_flags==3)
       {
	sleep(2);
        while(!demo_done)
        {
          buff_index = (buff_index + 1) %3;
            if(pthread_create(&fetch_thread, 0, fetch_in_thread, 0)) error("Thread creation failed");
            if(pthread_create(&detect_thread, 0, detect_in_thread, 0)) error("Thread creation failed");
            display_in_thread(0);
            pthread_join(fetch_thread, 0);
            pthread_join(detect_thread, 0);
            ++count;
	    if(ipcam_flags==2 || ipcam_flags==1 || ipcam_flags==4)
	    {
		//cvReleaseCapture(&cap);
		printf("00000000000000000");
		break;
	    }
         }
        }
    if(ipcam_flags==4)
    { 
	sleep(2);
	while(!demo_done)
        {
            buff_index = (buff_index + 1) %3;
            if(pthread_create(&fetch_thread, 0, fetch_in_thread, 0)) error("Thread creation failed");
            if(pthread_create(&detect_thread, 0, detect_in_thread, 0)) error("Thread creation failed");
            display_in_thread(0);
          
            pthread_join(fetch_thread, 0);
            pthread_join(detect_thread, 0);
            ++count;
	    if(ipcam_flags==2 || ipcam_flags==3 || ipcam_flags==1)
	    {
		//cvReleaseCapture(&cap)
		break;
	    }
         }
     
    }
	double after=get_wall_time();
	fps=1./(after-before);
	before=after;
  }  

	
}
/*void demo_compare(char *cfg1, char *weight1, char *cfg2, char *weight2, float thresh, int cam_index, const char *filename, char **names, int classes, int delay, char *prefix, int avg_frames, float hier, int w, int h, int frames, int fullscreen)
{
    demo_frame = avg_frames;
    predictions = calloc(demo_frame, sizeof(float*));
    image **alphabet = load_alphabet();
    demo_names = names;
    demo_alphabet = alphabet;
    demo_classes = classes;
    demo_thresh = thresh;
    demo_hier = hier;
    printf("Demo\n");
    net = load_network(cfg1, weight1, 0);
    set_batch_network(net, 1);
    pthread_t detect_thread;
    pthread_t fetch_thread;

    srand(2222222);

    if(filename){
        printf("video file: %s\n", filename);
       // cap = cvCaptureFromFile(filename);
    }else{
       // cap = cvCaptureFromCAM(cam_index);

        if(w){
            cvSetCaptureProperty(cap, CV_CAP_PROP_FRAME_WIDTH, w);
        }
        if(h){
            cvSetCaptureProperty(cap, CV_CAP_PROP_FRAME_HEIGHT, h);
        }
        if(frames){
            cvSetCaptureProperty(cap, CV_CAP_PROP_FPS, frames);
        }
    }

 //   if(!cap) error("Couldn't connect to webcam.\n");

    layer l = net->layers[net->n-1];
    demo_detections = l.n*l.w*l.h;
    int j;

    avg = (float *) calloc(l.outputs, sizeof(float));
    for(j = 0; j < demo_frame; ++j) predictions[j] = (float *) calloc(l.outputs, sizeof(float));

    boxes = (box *)calloc(l.w*l.h*l.n, sizeof(box));
    probs = (float **)calloc(l.w*l.h*l.n, sizeof(float *));
    for(j = 0; j < l.w*l.h*l.n; ++j) probs[j] = (float *)calloc(l.classes+1, sizeof(float));

    buff[0] = get_image_from_stream(cap);
    buff[1] = copy_image(buff[0]);
    buff[2] = copy_image(buff[0]);
    buff_letter[0] = letterbox_image(buff[0], net->w, net->h);
    buff_letter[1] = letterbox_image(buff[0], net->w, net->h);
    buff_letter[2] = letterbox_image(buff[0], net->w, net->h);
    ipl = cvCreateImage(cvSize(buff[0].w,buff[0].h), IPL_DEPTH_8U, buff[0].c);

    int count = 0;
    if(!prefix){
        cvNamedWindow("Demo", CV_WINDOW_NORMAL); 
        if(fullscreen){
            cvSetWindowProperty("Demo", CV_WND_PROP_FULLSCREEN, CV_WINDOW_FULLSCREEN);
        } else {
            cvMoveWindow("Demo", 0, 0);
            cvResizeWindow("Demo", 1352, 1013);
        }
    }

    demo_time = what_time_is_it_now();

    while(!demo_done){
        buff_index = (buff_index + 1) %3;
        if(pthread_create(&fetch_thread, 0, fetch_in_thread, 0)) error("Thread creation failed");
        if(pthread_create(&detect_thread, 0, detect_in_thread, 0)) error("Thread creation failed");
        if(!prefix){
            fps = 1./(what_time_is_it_now() - demo_time);
            demo_time = what_time_is_it_now();
            display_in_thread(0);
        }else{
            char name[256];
            sprintf(name, "%s_%08d", prefix, count);
            save_image(buff[(buff_index + 1)%3], name);
        }
        pthread_join(fetch_thread, 0);
        pthread_join(detect_thread, 0);
        ++count;
	
    }
}*/
#else
void demo(char *cfgfile, char *weightfile, float thresh, int cam_index, const char *filename, char **names, int classes, int delay, char *prefix, int avg, float hier, int w, int h, int frames, int fullscreen)
{
    fprintf(stderr, "Demo needs OpenCV for webcam images.\n");
}
#endif

